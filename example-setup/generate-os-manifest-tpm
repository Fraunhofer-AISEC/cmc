#!/bin/bash

set -euo pipefail

trap '[ $? -eq 0 ] && exit 0; printf "%s failed\n" "$0"' EXIT
dir="$(CDPATH='' cd -- "$(dirname -- "$0")" && pwd -P)"
source "${dir}/utils.sh"
export PATH=${PATH}:${HOME}/go/bin

if [[ "$#" -ne 1 ]]; then
   echo "Usage: $(basename "$0") <data-folder>"
   exit 1
fi

data=$(set -e; abs_path "${1}")
input="${data}/metadata-templates"
out="${data}/metadata-raw"
device_description="${out}/device.description.json"

if [[ ! -d "${data}" ]]; then
  echo "Data directory ${1} does not exist. Did you run the setup-cmc script? Abort.."
  exit 1
fi

if [[ ! -d "${input}" ]]; then
  echo "Data directory ${input} does not exist. Did you run the setup-cmc script? Abort.."
  exit 1
fi

mkdir -p "${out}"

echo "Using ${data} as directory for local data"

# Retrieve os details
set +e
kernel=$(uname -r)
os=$(lsb_release -sd 2>/dev/null)
set -e

# Parse the values of the OS PCRs from the kernel's binary bios measurements as reference values
referenceValues=$(sudo parse-srtm-pcrs -p 8,9,12,13,14,15 -f json -e)

# Load OS manifest
json=$(cat "${input}/manifest.json")

name="de.test.os"

# Insert manifest properties
setjson "json" "name"                  "${name}"
setjson "json" "version"               "$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
setjson "json" "developerCommonName"   "test developer"
setjson "json" "validity.notBefore"    "$(date -u +"%Y-%m-%dT%H:%M:%SZ" -d "-1 day")"
setjson "json" "validity.notAfter"     "$(date -u +"%Y-%m-%dT%H:%M:%SZ" -d "+2 years")"
setjson "json" "description"           "OS Manifest"
setarr  "json" "baseLayers"            "de.test.rtm"
setjson "json" "certLevel"             3

# Insert os details
json=$(echo "${json}" | jq ".details.kernel = \"${kernel}\"")
json=$(echo "${json}" | jq ".details.os = \"${os}\"")

# Insert reference values in the OS Manifest
json=$(echo "${json}" | jq 'del(.referenceValues[])')
json=$(echo "${json}" | jq --argjson ver "${referenceValues}" '.referenceValues += $ver')

# Save manifest
echo "Writing ${out}/rtm.manifest.json"
printf "%s\n" "${json}" > "${out}/os.manifest.json"

# App Description: Create corresponding app description
appdesc=$(cat "${input}/manifest.description.json")
appdesc=$(echo "${appdesc}" | jq ".name = \"${name}.description\"")
appdesc=$(echo "${appdesc}" | jq ".manifest = \"${name}\"")

# Device Description: Add/replace app description to/in device description
devdesc=$(cat "${device_description}")
exists=$(echo "${devdesc}" | jq "any(.descriptions[]; .name == \"${name}.description\")")
if [[ "${exists}" = false ]]; then
  echo "Adding app description to device description"
else
  echo "Replacing existing app description"
  devdesc=$(echo "$devdesc" | jq ".descriptions |= map(select(.name != \"${name}.description\"))")
fi
devdesc=$(echo "${devdesc}" | jq --argjson desc "[${appdesc}]" '.descriptions += $desc')

# Device Description: Store
echo "Writing ${device_description}"
printf "%s\n" "${devdesc}" > "${device_description}"

