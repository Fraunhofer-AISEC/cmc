#!/bin/bash

set -euo pipefail

trap '[ $? -eq 0 ] && exit 0; printf "%s failed\n" "$0"' EXIT
dir="$(CDPATH='' cd -- "$(dirname -- "$0")/.." && pwd -P)"

cmc="${dir}/.."
input="${cmc}/example-setup"
out="${dir}"

print_usage() {
  printf "Usage: ./setup-pki-ids [-i <input-dir>] [-o <output-dir] [-h]\n"
}

while getopts 'i:o:h' flag; do
  case "${flag}" in
    i)
        input="${OPTARG}"
        ;;
    o)
        out="${OPTARG}"
        ;;
    h)
        print_usage
        exit 1
        ;;
    *) print_usage
       exit 1 ;;
  esac
done

if [[ ! -d "${input}" ]]; then
    echo "Input directory ${input} does not exist"
    exit 1
fi

echo "Using ${input} as input directory"
echo "Using ${out} as output directory"

mkdir -p "${out}"

# Setup PKI with root CA and two SubCAs (one for users, one for devices)
# 1. Set up root CA (using ca.json to generate ca.pem and ca-key.pem)
cfssl gencert -initca "${input}/ca.json" | cfssljson -bare "${out}/ca"

# 2. Set up an OCSP Server for the Root CA
# Setup the database based on the .sql file derived from ~/go/src/github.com/cloudflare/cfssl/certdb/sqlite/migrations/001_CreateCertificates.sql
# shellcheck disable=SC2002
cat "${input}/certs_subcas.sql" | sqlite3 "${out}/certdb_subcas.db"
echo "{\"driver\":\"sqlite3\",\"data_source\":\"${out}/certdb_subcas.db\"}" > "${out}/sqlite_db_subcas.json"

# Generate key/certificate for OCSP Signing
cfssl genkey "${input}/ocsp_subcas.json" | cfssljson -bare "${out}/ocsp_subcas"
cfssl sign -ca "${out}/ca.pem" -ca-key "${out}/ca-key.pem" "${out}/ocsp_subcas.csr" | cfssljson -bare "${out}/ocsp_subcas"

# 3. Set up the intermediate CAs (using device_sub_ca.json and user_sub_ca.json)
cfssl genkey "${input}/device_sub_ca.json" | cfssljson -bare "${out}/device_sub_ca"
cfssl sign -ca "${out}/ca.pem" -ca-key "${out}/ca-key.pem" -db-config "${out}/sqlite_db_subcas.json" --config "${input}/ca-config.json" -profile intermediate  "${out}/device_sub_ca.csr" | cfssljson -bare "${out}/device_sub_ca"

cfssl genkey "${input}/user_sub_ca.json" | cfssljson -bare "${out}/user_sub_ca"
cfssl sign -ca "${out}/ca.pem" -ca-key "${out}/ca-key.pem" -db-config "${out}/sqlite_db_subcas.json" --config "${input}/ca-config.json" -profile intermediate "${out}/user_sub_ca.csr" | cfssljson -bare "${out}/user_sub_ca"

# 4. Set up OCSP Servers for the User Sub CAs
# shellcheck disable=SC2002
cat "${input}/certs_users.sql" | sqlite3 "${out}/certdb_users.db"
echo "{\"driver\":\"sqlite3\",\"data_source\":\"${out}/certdb_users.db\"}" > "${out}/sqlite_db_users.json"

# Generate key/certificate for OCSP Signing
cfssl genkey "${input}/ocsp_users.json" | cfssljson -bare "${out}/ocsp_users"
cfssl sign -ca "${out}/user_sub_ca.pem" -ca-key "${out}/user_sub_ca-key.pem" "${out}/ocsp_users.csr" | cfssljson -bare "${out}/ocsp_users"

# 5. Set up OCSP Servers for the User Sub CAs
# shellcheck disable=SC2002
cat "${input}/certs_devices.sql" | sqlite3 "${out}/certdb_devices.db"
echo "{\"driver\":\"sqlite3\",\"data_source\":\"${out}/certdb_devices.db\"}" > "${out}/sqlite_db_devices.json"

# Generate key/certificate for OCSP Signing
cfssl genkey "${input}/ocsp_devices.json" | cfssljson -bare "${out}/ocsp_devices"
cfssl sign -ca "${out}/device_sub_ca.pem" -ca-key "${out}/device_sub_ca-key.pem" "${out}/ocsp_devices.csr" | cfssljson -bare "${out}/ocsp_devices"

# Generate and sign certs for all needed users
gen () {
	cfssl genkey -config "${input}/ca-config.json" -profile user "${input}/$1.json" | cfssljson -bare "${out}/$1"
	cfssl sign -ca "${out}/user_sub_ca.pem" -ca-key "${out}/user_sub_ca-key.pem" -db-config "${out}/sqlite_db_users.json" "${out}/$1.csr" | cfssljson -bare "${out}/$1"
}

gen developer_A
gen developer_B

gen operator_A
gen operator_B

gen evaluator_A
gen evaluator_B

gen certifier_A
gen certifier_B

# Generate key and CSR for EST server
cfssl genkey -config "${input}/ca-config.json" -profile leafcert "${input}/cfssl-est.json" | cfssljson -bare "${out}/est"

# Sign CSR and generate certificate for EST server
cfssl sign -ca "${out}/ca.pem" -ca-key "${out}/ca-key.pem" "${out}/est.csr" | cfssljson -bare "${out}/est"
