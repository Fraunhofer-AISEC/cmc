#!/bin/bash

set -euo pipefail

trap '[ $? -eq 0 ] && exit 0; printf "%s failed\n" "$0"' EXIT
dir="$(CDPATH='' cd -- "$(dirname -- "$0")/.." && pwd -P)"
source "${dir}/bin/utils.sh"

# TODO set this to paths where your reproducible build outputs the required artifacts
artifacts="${dir}/../../artifacts/azure-tdx"

if [[ ! -d "${artifacts}" ]]; then
  echo "Artifacts directory ${artifacts} does not exist. Abort.."
  exit 1
fi

efi_shim="${artifacts}/shimx64.efi"
cmdline="${artifacts}/cmdline"
kernel="${artifacts}/vmlinuz"
gpt="${artifacts}/ev_efi_gpt_event"
efivars="${artifacts}/efivars"

boot0000="${efivars}/Boot0000-8be4df61-93ca-11d2-aa0d-00e098032b8c"
secure_boot="${efivars}/SecureBoot-8be4df61-93ca-11d2-aa0d-00e098032b8c"
pk="${efivars}/PK-8be4df61-93ca-11d2-aa0d-00e098032b8c"
kek="${efivars}/KEK-8be4df61-93ca-11d2-aa0d-00e098032b8c"
db="${efivars}/db-d719b2cb-3d3a-4596-a3bc-dad00e67656f"
dbx="${efivars}/dbx-d719b2cb-3d3a-4596-a3bc-dad00e67656f"

data="${dir}/data"
input="${dir}/example-setup/metadata-templates"
out="${data}/metadata-raw"

device_description="${out}/device.description.json"

if [[ ! -d "${data}" ]]; then
  echo "Data directory ${data} does not exist. Did you run the setup-cmc script? Abort.."
  exit 1
fi

if [[ ! -d "${input}" ]]; then
  echo "Data directory ${input} does not exist. Did you run the setup-cmc script? Abort.."
  exit 1
fi

mkdir -p "${out}"

echo "Using ${data} as directory for local data"

# Generate Intel SGX Root CA fingerprint
echo "Calculating Intel SGX Root CA fingerprint"
wget -O "${data}/pki/Intel_SGX_RootCA.pem" https://certificates.trustedservices.intel.com/Intel_SGX_Provisioning_Certification_RootCA.pem
fingerprint=$(openssl x509 -in "${data}/pki/Intel_SGX_RootCA.pem" -fingerprint -noout -sha256 | sed 's/://g' | cut -d "=" -f2)

# Generate reference values
echo "Calculating TDX reference values"

set +e
refs_tdx=$(calculate-tdx-mrs \
        --format json \
        --mrs 1 \
        --eventlog \
        --kernel "${kernel}" \
        --cmdline "${cmdline}" \
        --bootorder 0 \
        --bootxxxx "${boot0000}" \
        --secureboot "${secure_boot}" \
        --pk "${pk}" \
        --kek "${kek}" \
        --db "${db}" \
        --dbx "${dbx}" \
)
if [[ -z "${refs_tdx}" ]]; then
    echo "calculate-tdx-mrs failed: empty reference values"
    exit 1
fi
echo "${refs_tdx}" | jq empty 2>/dev/null || {
    echo "calculate-calculate-tdx-mrs failed: '${refs_tdx}'"
    exit 1
}
set -e

mrowner="000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
xfam="e702060000000000"

pcrs=1,2,3,4,5,6,7

set +e
refs_tpm=$(calculate-srtm-pcrs \
       --format json \
        --pcrs "${pcrs}" \
        --eventlog \
        --bootloader "${efi_shim}" \
        --kernel "${kernel}" \
        --cmdline "${cmdline}" \
        --gpt "${gpt}" \
        --format json \
        --bootorder 0 \
        --bootxxxx "${boot0000}" \
        --secureboot "${secure_boot}" \
        --pk "${pk}" \
        --kek "${kek}" \
        --db "${db}" \
        --dbx "${dbx}" \
)
if [[ -z "${refs_tpm}" ]]; then
    echo "calculate-tdx-mrs failed: empty reference values"
    exit 1
fi
echo "${refs_tpm}" | jq empty 2>/dev/null || {
    echo "calculate-calculate-tdx-mrs failed: '${refs_tpm}'"
    exit 1
}
set -e

# Load manifest template and policy
json=$(cat "${input}/manifest.json")
policy=$(cat "${input}/tdx.policy.json")

name="de.test.rtm"

# Insert manifest properties
setjson "json" "name"                  "${name}"
setjson "json" "version"               "$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
setjson "json" "developerCommonName"   "test developer"
setjson "json" "validity.notBefore"    "$(date -u +"%Y-%m-%dT%H:%M:%SZ" -d "-1 day")"
setjson "json" "validity.notAfter"     "$(date -u +"%Y-%m-%dT%H:%M:%SZ" -d "+2 years")"
setjson "json" "description"           "RTM Manifest"
setarr  "json" "baseLayers"            "${name}"
setjson "json" "certLevel"             3
setjson "json" "caFingerprint"         "${fingerprint}"

setarr    "json" "referenceValues"       "${refs_tdx}"
extendarr "json" "referenceValues"       "${refs_tpm}"

setjson "policy" "quoteVersion"                 4
setjson "policy" "tdAttributes.debug"           false
setjson "policy" "tdAttributes.septVEDisable"   true
setjson "policy" "tdAttributes.pks"             false
setjson "policy" "tdAttributes.kl"              false
setjson "policy" "tdId.mrOwner"                 \""${mrowner}"\"
setjson "policy" "tdId.mrOwnerConfig"           \""${mrowner}"\"
setjson "policy" "tdId.mrConfigId"              \""${mrowner}\""
setjson "policy" "xfam"                         "${xfam}"

setjson "json" "tdxPolicy" "${policy}"

# Save the RTM manifest
echo "Writing ${out}/rtm.manifest.json"
printf "%s\n" "${json}" > "${out}/rtm.manifest.json"

# RTM Manifest Description: Create corresponding RTM manifest description
rtmdesc=$(cat "${input}/manifest.description.json")
rtmdesc=$(echo "${rtmdesc}" | jq ".name = \"${name}.description\"")
rtmdesc=$(echo "${rtmdesc}" | jq ".manifest = \"${name}\"")

# Device Description: Add/replace RTM manifest description to/in device description
devdesc=$(cat "${device_description}")
exists=$(echo "${devdesc}" | jq "any(.descriptions[]; .name == \"${name}.description\")")
if [[ "${exists}" = false ]]; then
  echo "Adding RTM manifest description to device description"
else
  echo "Replacing existing RTM Manifest description"
  devdesc=$(echo "$devdesc" | jq ".descriptions |= map(select(.name != \"${name}.description\"))")
fi
devdesc=$(echo "${devdesc}" | jq --argjson desc "[${rtmdesc}]" '.descriptions += $desc')

# Device Description: Store
echo "Writing ${device_description}"
printf "%s\n" "${devdesc}" > "${device_description}"
