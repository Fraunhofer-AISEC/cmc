#!/bin/bash

set -euo pipefail

trap '[ $? -eq 0 ] && exit 0; printf "%s failed\n" "$0"' EXIT
dir="$(CDPATH='' cd -- "$(dirname -- "$0")" && pwd -P)"
source "${dir}/utils.sh"
export PATH=${PATH}:${HOME}/go/bin

if [[ "$#" -lt 3 ]]; then
   echo "Usage: ./update-container-manifest <container-image> <data-folder> <cbor|json>"
   exit 1
fi

container="$1"
shift
data=$(set -e; abs_path "$1")
shift
ser="$1"

input="${data}/metadata-raw"
tmp="${data}/metadata-tmp"
output="${data}/metadata-signed"
container_name=$(echo "${container}-oci" | sed 's:.*/::' | tr : -)

echo "Creating reference values for container: ${container}"
echo "Using ${data} as directory for local data"

# Create a temporary directory
tmpdir=$(mktemp -d)
echo "Using temporary directory ${tmpdir} for processing"

# Pull and push image to OCI-archive format
buildah pull ${container}
buildah push ${container} oci-archive:${tmpdir}/myimage-oci.tar:latest

# Prepare the image directory within the temp directory
mkdir -p ${tmpdir}/image

# Extract the OCI image
(cd ${tmpdir}/image ; tar -xvf ${tmpdir}/myimage-oci.tar)

# Unpack the image to a bundle
(cd ${tmpdir}/image ; umoci unpack --rootless --image ./:latest bundle)

# Ensure the container's rootfs path is correctly set
container_rootfs="${tmpdir}/image/bundle/rootfs"
config="${tmpdir}/image/bundle/config.json"

refvals=$(measure-bundle -config "${config}" -rootfs "${container_rootfs}")

rm -r ${tmpdir}

# App Manifest: Replace existing reference values with new reference values in the App Manifest
json=$(cat "${input}/app.manifest.json")
json=$(echo "${json}" | jq 'del(.referenceValues[])')
json=$(echo "${json}" | jq --argjson ver "${refvals}" '.referenceValues += $ver')

# App Manifest: Set name and reference value name
json=$(echo "${json}" | jq ".name = \"${container}\"")
json=$(echo "${json}" | jq ".referenceValues[0].name += \": ${container}\"")

# App Manifest: Store
echo "Writing ${input}/${container_name}.manifest.json"
printf "%s\n" "${json}" > "${input}/${container_name}.manifest.json"

# App Description: Create corresponding app description
appdesc=$(cat "${input}/app.description.json")
appdesc=$(echo "${appdesc}" | jq ".name = \"${container}.description\"")
appdesc=$(echo "${appdesc}" | jq ".appManifest = \"${container}\"")

# Device Description: Add/replace app description to/in device description
devdesc=$(cat "${input}/device.description.json")
exists=$(echo "${devdesc}" | jq "any(.appDescriptions[]; .name == \"${container}.description\")")
if [[ "${exists}" = false ]]; then
  echo "Adding app description to device description"
else
  echo "Replacing existing app description"
  devdesc=$(echo "$devdesc" | jq ".appDescriptions |= map(select(.name != \"${container}.description\"))")
fi
devdesc=$(echo "${devdesc}" | jq --argjson desc "[${appdesc}]" '.appDescriptions += $desc')

# Device Description: store
echo "Writing ${input}/device.description.json"
printf "%s\n" "${devdesc}" > "${input}/device.description.json"

# Sign the metadata*
key="${data}/pki/signing-cert-key.pem"
chain="${data}/pki/signing-cert.pem,${data}/pki/ca.pem"

rm -rf "${tmp}"/${container_name}.manifest.*
rm -rf "${output}"/${container_name}.manifest.*

# Convert to CBOR if specified
if [[ "${ser,,}" = "json" ]]; then
  echo "using json serialization"
  cp "${input}/${container_name}.manifest.json" "${tmp}/${container_name}.manifest.json"
elif [[ "${ser,,}" = "cbor" ]]; then
  echo "using cbor serialiation"
  cmc-converter -in "${input}/${container_name}.manifest.json" -out "${tmp}/${container_name}.manifest.cbor" -outform cbor
else
  echo "serialization format ${ser} is not supported"
  exit 1
fi

cmc-signing-tool -in "${tmp}/${container_name}.manifest.${ser}" -out "${output}/${container_name}.manifest.${ser}" -keys "${key}" -x5cs "${chain}"
