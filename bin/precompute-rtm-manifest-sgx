#!/bin/bash

set -euo pipefail

trap '[ $? -eq 0 ] && exit 0; printf "%s failed\n" "$0"' EXIT
dir="$(CDPATH='' cd -- "$(dirname -- "$0")/.." && pwd -P)"
source "${dir}/bin/utils.sh"

data="${dir}/data"
cmc="${dir}"
input="${dir}/example-setup/metadata-templates"
out="${data}/metadata-raw"

device_description="${out}/device.description.json"

if [[ ! -d "${data}" ]]; then
  echo "Data directory ${data} does not exist. Did you run the setup-cmc script? Abort.."
  exit 1
fi

if [[ ! -d "${input}" ]]; then
  echo "Data directory ${input} does not exist. Did you run the setup-cmc script? Abort.."
  exit 1
fi

mkdir -p "${out}"

echo "Using ${data} as directory for local data"

# Build cmcctl enclave
cd "${cmc}/cmcctl"
make egocmc

# Get the fingerprint of the Intel SGX Provisioning Certitification Root CA
wget -O "${data}/pki/Intel_SGX_RootCA.pem" https://certificates.trustedservices.intel.com/Intel_SGX_Provisioning_Certification_RootCA.pem
fingerprint=$(openssl x509 -in "${data}/pki/Intel_SGX_RootCA.pem" -fingerprint -noout -sha256 | sed 's/://g' | cut -d "=" -f2)

# Get MRENCLAVE reference value
mrenclave=$(echo "$(ego uniqueid cmcctl)" | awk 'NR==1')
referenceValues='[
    {
      "type": "SGX Reference Value",
      "subtype": "MRENCLAVE",
      "index": 0,
      "sha256": "'"${mrenclave}"'",
      "description": "MRENCLAVE"
    }
]'

# Get MRSIGNER enclave signer hash
mrsigner=$(echo "$(ego signerid cmcctl)" | awk 'NR==1')

cd "${data}"

# Load manifest template
json=$(cat "${input}/manifest.json")

name="de.test.rtm"

# Insert manifest properties
setjson "json" "name"                  "${name}"
setjson "json" "version"               "$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
setjson "json" "developerCommonName"   "test developer"
setjson "json" "validity.notBefore"    "$(date -u +"%Y-%m-%dT%H:%M:%SZ" -d "-1 day")"
setjson "json" "validity.notAfter"     "$(date -u +"%Y-%m-%dT%H:%M:%SZ" -d "+2 years")"
setjson "json" "description"           "RTM Manifest"
setarr  "json" "baseLayers"            "${name}"
setjson "json" "certLevel"             3
setjson "json" "caFingerprint"         "${fingerprint}"

# Create policy
policy=$(cat "${input}/sgx.policy.json")
setjson "policy" "quoteVersion"                 3
setjson "policy" "attributes.initted"           true
setjson "policy" "attributes.debug"             false
setjson "policy" "attributes.mode64Bit"         true
setjson "policy" "attributes.provisionKey"      false
setjson "policy" "attributes.eInitToken"        false
setjson "policy" "attributes.kss"               false
setjson "policy" "attributes.legacy"            false
setjson "policy" "attributes.avx"               false
setjson "policy" "isvSvn"                       1
setjson "policy" "isvProdId"                    1
setjson "policy" "mrsigner"                     "${mrsigner}"

setjson "json" "sgxPolicy" "${policy}"

# Replace existing reference values with new reference values
json=$(echo "${json}" | jq 'del(.referenceValues[])')
json=$(echo "${json}" | jq --argjson ver "${referenceValues}" '.referenceValues += $ver')

# Save the manifest
echo "Writing ${out}/rtm.manifest.json"
printf "%s\n" "${json}" > "${out}/rtm.manifest.json"

# Manifest Description: Create corresponding manifest description
rtmdesc=$(cat "${input}/manifest.description.json")
rtmdesc=$(echo "${rtmdesc}" | jq ".name = \"${name}.description\"")
rtmdesc=$(echo "${rtmdesc}" | jq ".manifest = \"${name}\"")

# Device Description: Add/replace manifest description to/in device description
devdesc=$(cat "${device_description}")
exists=$(echo "${devdesc}" | jq "any(.descriptions[]; .name == \"${name}.description\")")
if [[ "${exists}" = false ]]; then
  echo "Adding manifest description to device description"
else
  echo "Replacing existing Manifest description"
  devdesc=$(echo "$devdesc" | jq ".descriptions |= map(select(.name != \"${name}.description\"))")
fi
devdesc=$(echo "${devdesc}" | jq --argjson desc "[${rtmdesc}]" '.descriptions += $desc')

# Device Description: Store
echo "Writing ${device_description}"
printf "%s\n" "${devdesc}" > "${device_description}"
