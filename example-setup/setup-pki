#!/bin/bash

set -euo pipefail

trap '[ $? -eq 0 ] && exit 0; printf "%s failed\n" "$0"' EXIT
dir="$(CDPATH='' cd -- "$(dirname -- "$0")/.." && pwd -P)"

cmc="${dir}/.."
input="${cmc}/example-setup"
out="${dir}"

print_usage() {
  printf "Usage: ./setup-pki [-i <input-dir>] [-o <output-dir] [-h]\n"
}

while getopts 'i:o:h' flag; do
  case "${flag}" in
    i)
        input="${OPTARG}"
        ;;
    o)
        out="${OPTARG}"
        ;;
    h)
        print_usage
        exit 1
        ;;
    *) print_usage
       exit 1 ;;
  esac
done

if [[ ! -d "${input}" ]]; then
    echo "Input directory ${input} does not exist"
    exit 1
fi

echo "Using ${input} as input directory"
echo "Using ${out} as output directory"

mkdir -p "${out}"

# Set up root CA
cfssl gencert -initca "${input}/cfssl-ca.json" | cfssljson -bare "${out}/ca"

# Generate key and CSR for metadata signing
cfssl genkey -config "${input}/cfssl-ca-config.json" -profile leafcert "${input}/cfssl-leaf.json" | cfssljson -bare "${out}/signing-cert"

# Sign CSR and generate certificate for metadata signing
cfssl sign -ca "${out}/ca.pem" -ca-key "${out}/ca-key.pem" -profile leafcert -config "${input}/cfssl-ca-config.json" "${out}/signing-cert.csr" | cfssljson -bare "${out}/signing-cert"

# Generate key and CSR for EST server
cfssl genkey -config "${input}/cfssl-ca-config.json" -profile leafcert "${input}/cfssl-est.json" | cfssljson -bare "${out}/est"

# Sign CSR and generate certificate for EST server
cfssl sign -ca "${out}/ca.pem" -ca-key "${out}/ca-key.pem" -profile leafcert -config "${input}/cfssl-ca-config.json" "${out}/est.csr" | cfssljson -bare "${out}/est"
