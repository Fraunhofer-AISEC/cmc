// Copyright (c) 2021 Fraunhofer AISEC
// Fraunhofer-Gesellschaft zur Foerderung der angewandten Forschung e.V.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package attestationreport

import (
	"encoding/hex"
	"testing"

	"github.com/sirupsen/logrus"
)

func Test_verifySnpMeasurements(t *testing.T) {

	logrus.SetLevel(logrus.TraceLevel)

	type args struct {
		snpM  *Measurement
		snpV  []ReferenceValue
		nonce []byte
	}
	tests := []struct {
		name string
		args args
		want bool
	}{
		{
			name: "Valid Attestation Report",
			args: args{
				snpM: &Measurement{
					Type:     "SNP Measurement",
					Evidence: validReport,
					Certs:    validCertChain,
				},
				snpV: []ReferenceValue{
					{
						Type:   "SNP Reference Value",
						Sha384: validMeasurement,
						Snp: &SnpDetails{
							Version:       validVersion,
							CaFingerprint: validFingerprint,
							Policy:        validSnpPolicy,
							Fw:            validFw,
							Tcb:           validTcb,
						},
					},
				},
				nonce: validNonce,
			},
			want: true,
		},
		{
			name: "Invalid Signature",
			args: args{
				snpM: &Measurement{
					Type:     "SNP Measurement",
					Evidence: invalidReportSignature,
					Certs:    validCertChain,
				},
				snpV: []ReferenceValue{
					{
						Type:   "SNP Reference Value",
						Sha384: validMeasurement,
						Snp: &SnpDetails{
							Version:       validVersion,
							CaFingerprint: validFingerprint,
							Policy:        validSnpPolicy,
							Fw:            validFw,
							Tcb:           validTcb,
						},
					},
				},
				nonce: validNonce,
			},
			want: false,
		},
		{
			name: "Invalid Certificate Chain",
			args: args{
				snpM: &Measurement{
					Type:     "SNP Measurement",
					Evidence: validReport,
					Certs:    invalidCertChain,
				},
				snpV: []ReferenceValue{
					{
						Type:   "SNP Reference Value",
						Sha384: validMeasurement,
						Snp: &SnpDetails{
							Version:       validVersion,
							CaFingerprint: validFingerprint,
							Policy:        validSnpPolicy,
							Fw:            validFw,
							Tcb:           validTcb,
						},
					},
				},
				nonce: validNonce,
			},
			want: false,
		},
		{
			name: "Invalid VCEK Certificate",
			args: args{
				snpM: &Measurement{
					Type:     "SNP Measurement",
					Evidence: validReport,
					Certs:    invalidLeafCert,
				},
				snpV: []ReferenceValue{
					{
						Type:   "SNP Reference Value",
						Sha384: validMeasurement,
						Snp: &SnpDetails{
							Version:       validVersion,
							CaFingerprint: validFingerprint,
							Policy:        validSnpPolicy,
							Fw:            validFw,
							Tcb:           validTcb,
						},
					},
				},
				nonce: validNonce,
			},
			want: false,
		},
		{
			name: "Invalid Report",
			args: args{
				snpM: &Measurement{
					Type:     "SNP Measurement",
					Evidence: invalidReportData,
					Certs:    validCertChain,
				},
				snpV: []ReferenceValue{
					{
						Type:   "SNP Reference Value",
						Sha384: validMeasurement,
						Snp: &SnpDetails{
							Version:       validVersion,
							CaFingerprint: validFingerprint,
							Policy:        validSnpPolicy,
							Fw:            validFw,
							Tcb:           validTcb,
						},
					},
				},
				nonce: validNonce,
			},
			want: false,
		},
		{
			name: "Invalid Measurement",
			args: args{
				snpM: &Measurement{
					Type:     "SNP Measurement",
					Evidence: validReport,
					Certs:    validCertChain,
				},
				snpV: []ReferenceValue{
					{
						Type:   "SNP Reference Value",
						Sha384: invalidMeasurement,
						Snp: &SnpDetails{
							Version:       validVersion,
							CaFingerprint: validFingerprint,
							Policy:        validSnpPolicy,
							Fw:            validFw,
							Tcb:           validTcb,
						},
					},
				},
				nonce: validNonce,
			},
			want: false,
		},
		{
			name: "Invalid Policy Parameter Debug",
			args: args{
				snpM: &Measurement{
					Type:     "SNP Measurement",
					Evidence: validReport,
					Certs:    validCertChain,
				},
				snpV: []ReferenceValue{
					{
						Type:   "SNP Reference Value",
						Sha384: validMeasurement,
						Snp: &SnpDetails{
							Version:       validVersion,
							CaFingerprint: validFingerprint,
							Policy:        invalidSnpPolicy,
							Fw:            validFw,
							Tcb:           validTcb,
						},
					},
				},
				nonce: validNonce,
			},
			want: false,
		},
		{
			name: "Invalid Nonce",
			args: args{
				snpM: &Measurement{
					Type:     "SNP Measurement",
					Evidence: validReport,
					Certs:    validCertChain,
				},
				snpV: []ReferenceValue{
					{
						Type:   "SNP Reference Value",
						Sha384: validMeasurement,
						Snp: &SnpDetails{
							Version:       validVersion,
							CaFingerprint: validFingerprint,
							Policy:        validSnpPolicy,
							Fw:            validFw,
							Tcb:           validTcb,
						},
					},
				},
				nonce: invalidNonce,
			},
			want: false,
		},
		{
			name: "Invalid Reference Value Type",
			args: args{
				snpM: &Measurement{
					Type:     "SNP Measurement",
					Evidence: validReport,
					Certs:    validCertChain,
				},
				snpV: []ReferenceValue{
					{
						Type:   "TPM Reference Value",
						Sha256: validMeasurement,
					},
				},
				nonce: invalidNonce,
			},
			want: false,
		},
		{
			name: "No Reference Values Present",
			args: args{
				snpM: &Measurement{
					Type:     "SNP Measurement",
					Evidence: validReport,
					Certs:    validCertChain,
				},
				nonce: validNonce,
			},
			want: false,
		},
		{
			name: "Invalid Firmware",
			args: args{
				snpM: &Measurement{
					Type:     "SNP Measurement",
					Evidence: validReport,
					Certs:    validCertChain,
				},
				snpV: []ReferenceValue{
					{
						Type:   "SNP Reference Value",
						Sha384: validMeasurement,
						Snp: &SnpDetails{
							Version:       validVersion,
							CaFingerprint: validFingerprint,
							Policy:        validSnpPolicy,
							Fw:            invalidFw,
							Tcb:           validTcb,
						},
					},
				},
				nonce: validNonce,
			},
			want: false,
		},
		{
			name: "Invalid TCB",
			args: args{
				snpM: &Measurement{
					Type:     "SNP Measurement",
					Evidence: validReport,
					Certs:    validCertChain,
				},
				snpV: []ReferenceValue{
					{
						Type:   "SNP Reference Value",
						Sha384: validMeasurement,
						Snp: &SnpDetails{
							Version:       validVersion,
							CaFingerprint: validFingerprint,
							Policy:        validSnpPolicy,
							Fw:            validFw,
							Tcb:           invalidTcb,
						},
					},
				},
				nonce: validNonce,
			},
			want: false,
		},
		{
			name: "Invalid CA KeyID",
			args: args{
				snpM: &Measurement{
					Type:     "SNP Measurement",
					Evidence: validReport,
					Certs:    validCertChain,
				},
				snpV: []ReferenceValue{
					{
						Type:   "SNP Reference Value",
						Sha384: validMeasurement,
						Snp: &SnpDetails{
							Version:       validVersion,
							CaFingerprint: invalidFingerprint,
							Policy:        validSnpPolicy,
							Fw:            validFw,
							Tcb:           validTcb,
						},
					},
				},
				nonce: validNonce,
			},
			want: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if _, got := verifySnpMeasurements(*tt.args.snpM, tt.args.nonce, tt.args.snpV); got != tt.want {
				t.Errorf("verifySnpMeasurements() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_checkMinVersion(t *testing.T) {
	type args struct {
		version []uint8
		ref     []uint8
	}
	tests := []struct {
		name string
		args args
		want bool
	}{
		{"Valid: Same Version", args{[]uint8{1, 2, 3}, []uint8{1, 2, 3}}, true},
		{"Valid: Higher Major", args{[]uint8{3, 2, 3}, []uint8{1, 2, 3}}, true},
		{"Valid: Higher Minor", args{[]uint8{1, 5, 3}, []uint8{1, 2, 3}}, true},
		{"Valid: Higher Build", args{[]uint8{1, 2, 9}, []uint8{1, 2, 3}}, true},
		{"Invalid: Lower Major", args{[]uint8{1, 2, 3}, []uint8{2, 2, 3}}, false},
		{"Invalid: Lower Minor", args{[]uint8{1, 2, 3}, []uint8{1, 3, 3}}, false},
		{"Invalid: Lower Build", args{[]uint8{1, 2, 3}, []uint8{1, 2, 4}}, false},
		{"Invalid: Different Length", args{[]uint8{1, 2, 3}, []uint8{2, 3}}, false},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := checkMinVersion(tt.args.version, tt.args.ref); got != tt.want {
				t.Errorf("checkMinVersion() = %v, want %v", got, tt.want)
			}
		})
	}
}

var (
	validReport = []byte{
		0x00, 0x00, 0x00, 0x00, 0xa0, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x43,
		0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,
		0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,
		0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,
		0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,
		0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,
		0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x51, 0x31, 0xee, 0xd7,
		0xdb, 0x07, 0xe1, 0xeb, 0x84, 0x95, 0x40, 0x19, 0xfc, 0xdc, 0x59, 0x03,
		0x68, 0x8f, 0x15, 0xa9, 0xeb, 0x95, 0xea, 0x59, 0xc7, 0x51, 0xfd, 0x90,
		0x2d, 0xd0, 0x9d, 0xfe, 0x51, 0x95, 0x6a, 0xbe, 0x38, 0xd7, 0xcc, 0x25,
		0xbc, 0x91, 0x22, 0x56, 0xb1, 0xbf, 0x38, 0x4c, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0xaa, 0xeb, 0x74, 0xad, 0xd5, 0x17, 0x73, 0x63,
		0x94, 0xd8, 0x72, 0x19, 0x29, 0x13, 0x4b, 0x53, 0x4f, 0x0b, 0x09, 0x19,
		0x69, 0xb8, 0xb1, 0x1a, 0xad, 0x4d, 0x10, 0x0c, 0x77, 0xb5, 0xfa, 0x50,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x02, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x06, 0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0xd5, 0x59, 0xea, 0xa1, 0xc6, 0x3e, 0xa0, 0x4b,
		0x2f, 0x4b, 0xbd, 0x97, 0xc3, 0xc1, 0xd2, 0x39, 0x8c, 0x1a, 0x27, 0x35,
		0x77, 0x6c, 0xd8, 0x0e, 0x05, 0x71, 0xdc, 0x3a, 0x39, 0x07, 0x0f, 0xb5,
		0x64, 0xf9, 0x0d, 0xb2, 0x63, 0x5c, 0x51, 0x3f, 0xef, 0xc7, 0x24, 0x8e,
		0xcf, 0xf3, 0x54, 0x2e, 0x1e, 0x85, 0x6d, 0xdc, 0x3d, 0x1b, 0x84, 0x9b,
		0xdf, 0xe0, 0x1f, 0x99, 0xaf, 0xb8, 0xd0, 0xb6, 0x02, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x06, 0x43, 0x03, 0x33, 0x01, 0x00, 0x03, 0x33, 0x01, 0x00,
		0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x43, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa2, 0x9d, 0x76, 0x4c,
		0xf8, 0x30, 0x92, 0x00, 0x17, 0xa7, 0x48, 0xae, 0x27, 0xdd, 0xb5, 0x9c,
		0x11, 0x96, 0xc9, 0x78, 0xd4, 0x4f, 0xde, 0x96, 0x99, 0x69, 0x49, 0xec,
		0x5a, 0xd2, 0x2e, 0xa2, 0xb4, 0x62, 0x9a, 0x0e, 0x83, 0xc6, 0x6a, 0xa5,
		0x7f, 0x66, 0xc9, 0xfb, 0xb9, 0x92, 0x04, 0x6b, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf5, 0xf7, 0x17, 0x85,
		0x0b, 0x7f, 0x29, 0x27, 0x79, 0xf8, 0x7d, 0xe5, 0xb4, 0x4d, 0x1e, 0xd9,
		0x3b, 0x0e, 0x70, 0x13, 0xc6, 0x7c, 0x0b, 0xa0, 0x0f, 0x31, 0x70, 0x1c,
		0x82, 0xab, 0x80, 0x36, 0x44, 0xfb, 0x62, 0x26, 0xde, 0x48, 0x9a, 0xe3,
		0xda, 0x9c, 0x89, 0x8a, 0xed, 0x63, 0xee, 0xb3, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00}

	invalidReportSignature = []byte{
		0x00, 0x00, 0x00, 0x00, 0xa0, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x43,
		0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,
		0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,
		0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,
		0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,
		0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,
		0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x51, 0x31, 0xee, 0xd7,
		0xdb, 0x07, 0xe1, 0xeb, 0x84, 0x95, 0x40, 0x19, 0xfc, 0xdc, 0x59, 0x03,
		0x68, 0x8f, 0x15, 0xa9, 0xeb, 0x95, 0xea, 0x59, 0xc7, 0x51, 0xfd, 0x90,
		0x2d, 0xd0, 0x9d, 0xfe, 0x51, 0x95, 0x6a, 0xbe, 0x38, 0xd7, 0xcc, 0x25,
		0xbc, 0x91, 0x22, 0x56, 0xb1, 0xbf, 0x38, 0x4c, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0xaa, 0xeb, 0x74, 0xad, 0xd5, 0x17, 0x73, 0x63,
		0x94, 0xd8, 0x72, 0x19, 0x29, 0x13, 0x4b, 0x53, 0x4f, 0x0b, 0x09, 0x19,
		0x69, 0xb8, 0xb1, 0x1a, 0xad, 0x4d, 0x10, 0x0c, 0x77, 0xb5, 0xfa, 0x50,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x02, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x06, 0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0xd5, 0x59, 0xea, 0xa1, 0xc6, 0x3e, 0xa0, 0x4b,
		0x2f, 0x4b, 0xbd, 0x97, 0xc3, 0xc1, 0xd2, 0x39, 0x8c, 0x1a, 0x27, 0x35,
		0x77, 0x6c, 0xd8, 0x0e, 0x05, 0x71, 0xdc, 0x3a, 0x39, 0x07, 0x0f, 0xb5,
		0x64, 0xf9, 0x0d, 0xb2, 0x63, 0x5c, 0x51, 0x3f, 0xef, 0xc7, 0x24, 0x8e,
		0xcf, 0xf3, 0x54, 0x2e, 0x1e, 0x85, 0x6d, 0xdc, 0x3d, 0x1b, 0x84, 0x9b,
		0xdf, 0xe0, 0x1f, 0x99, 0xaf, 0xb8, 0xd0, 0xb6, 0x02, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x06, 0x43, 0x03, 0x33, 0x01, 0x00, 0x03, 0x33, 0x01, 0x00,
		0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x43, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa2, 0x9d, 0x76, 0x4c,
		0xf8, 0x30, 0x92, 0x00, 0x17, 0xa7, 0x48, 0xae, 0x27, 0xdd, 0xb5, 0x9c,
		0x11, 0x96, 0xc9, 0x78, 0xd4, 0x4f, 0xde, 0x96, 0x9c, 0x69, 0x49, 0xec,
		0x5a, 0xd2, 0x2e, 0xa2, 0xb4, 0x62, 0x9a, 0x0e, 0x83, 0xc6, 0x6a, 0xa5,
		0x7f, 0x66, 0xc9, 0xfb, 0xb9, 0x92, 0x04, 0x6b, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf5, 0xf7, 0x17, 0x85,
		0x0b, 0x7f, 0x29, 0x27, 0x79, 0xf8, 0x7d, 0xe5, 0xb4, 0x4d, 0x1e, 0xd9,
		0x3b, 0x0e, 0x70, 0x13, 0xc6, 0x7c, 0x0b, 0xa0, 0x0f, 0x31, 0x70, 0x1c,
		0x82, 0xab, 0x80, 0x36, 0x44, 0xfb, 0x62, 0x26, 0xde, 0x48, 0x9a, 0xe3,
		0xda, 0x9c, 0x89, 0x8a, 0xed, 0x63, 0xee, 0xb3, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00}

	invalidReportData = []byte{
		0x00, 0x00, 0x00, 0x00, 0xa0, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x43,
		0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,
		0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,
		0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,
		0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,
		0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,
		0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x51, 0x31, 0xee, 0xd7,
		0xdb, 0x07, 0xe1, 0xeb, 0x84, 0x95, 0x40, 0x19, 0xfc, 0xdc, 0x59, 0x03,
		0x68, 0x8f, 0x15, 0xa9, 0xeb, 0x95, 0xea, 0x59, 0xc7, 0x51, 0xfd, 0x90,
		0x2d, 0xd0, 0x9d, 0xfe, 0x51, 0x95, 0x6a, 0xbe, 0x38, 0xd7, 0xcc, 0x25,
		0xbc, 0x91, 0x22, 0x56, 0xb1, 0xbf, 0x38, 0x4c, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0xaa, 0xeb, 0x74, 0xad, 0xd5, 0x17, 0x73, 0x63,
		0x94, 0xd8, 0x72, 0x19, 0x29, 0x13, 0x4b, 0x53, 0x4f, 0x0b, 0x09, 0x19,
		0x69, 0xb8, 0xb1, 0x1a, 0xad, 0x4d, 0x10, 0x0c, 0x77, 0xb5, 0xfa, 0x50,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x02, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x06, 0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0xd5, 0x59, 0xea, 0xa1, 0xc6, 0x3e, 0xa0, 0x4b,
		0x2f, 0x4b, 0xbd, 0x97, 0xc3, 0xc1, 0xd2, 0x39, 0x8c, 0x1a, 0x27, 0x35,
		0x77, 0x6c, 0xd8, 0x0e, 0x05, 0x71, 0xdc, 0x3a, 0x39, 0x07, 0x0f, 0xb5,
		0x64, 0xf9, 0x0d, 0xb2, 0x63, 0x5c, 0x51, 0x3f, 0xef, 0xc7, 0x24, 0x8e,
		0xcf, 0xf3, 0x54, 0x2e, 0x1e, 0x85, 0x6d, 0xdc, 0x3d, 0x1b, 0x84, 0x9b,
		0xdf, 0xe0, 0x1f, 0x99, 0xaf, 0xb8, 0xd0, 0xb6, 0x02, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x06, 0x43, 0x03, 0x33, 0x01, 0x00, 0x03, 0x33, 0x01, 0x00,
		0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x43, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa2, 0x9d, 0x76, 0x4c,
		0xf8, 0x30, 0x92, 0x00, 0x17, 0xa7, 0x48, 0xae, 0x27, 0xdd, 0xb5, 0x9c,
		0x11, 0x96, 0xc9, 0x78, 0xd4, 0x4f, 0xde, 0x96, 0x99, 0x69, 0x49, 0xec,
		0x5a, 0xd2, 0x2e, 0xa2, 0xb4, 0x62, 0x9a, 0x0e, 0x83, 0xc6, 0x6a, 0xa5,
		0x7f, 0x66, 0xc9, 0xfb, 0xb9, 0x92, 0x04, 0x6b, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf5, 0xf7, 0x17, 0x85,
		0x0b, 0x7f, 0x29, 0x27, 0x79, 0xf8, 0x7d, 0xe5, 0xb4, 0x4d, 0x1e, 0xd9,
		0x3b, 0x0e, 0x70, 0x13, 0xc6, 0x7c, 0x0b, 0xa0, 0x0f, 0x31, 0x70, 0x1c,
		0x82, 0xab, 0x80, 0x36, 0x44, 0xfb, 0x62, 0x26, 0xde, 0x48, 0x9a, 0xe3,
		0xda, 0x9c, 0x89, 0x8a, 0xed, 0x63, 0xee, 0xb3, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00}

	// Signing certificate
	validVcek = conv([]byte(`
-----BEGIN CERTIFICATE-----
MIIFTDCCAvugAwIBAgIBADBGBgkqhkiG9w0BAQowOaAPMA0GCWCGSAFlAwQCAgUA
oRwwGgYJKoZIhvcNAQEIMA0GCWCGSAFlAwQCAgUAogMCATCjAwIBATB7MRQwEgYD
VQQLDAtFbmdpbmVlcmluZzELMAkGA1UEBhMCVVMxFDASBgNVBAcMC1NhbnRhIENs
YXJhMQswCQYDVQQIDAJDQTEfMB0GA1UECgwWQWR2YW5jZWQgTWljcm8gRGV2aWNl
czESMBAGA1UEAwwJU0VWLU1pbGFuMB4XDTIyMDQyNjE2Mzc0OVoXDTI5MDQyNjE2
Mzc0OVowejEUMBIGA1UECwwLRW5naW5lZXJpbmcxCzAJBgNVBAYTAlVTMRQwEgYD
VQQHDAtTYW50YSBDbGFyYTELMAkGA1UECAwCQ0ExHzAdBgNVBAoMFkFkdmFuY2Vk
IE1pY3JvIERldmljZXMxETAPBgNVBAMMCFNFVi1WQ0VLMHYwEAYHKoZIzj0CAQYF
K4EEACIDYgAE+F8EKAE/+McOP30pLAnr+nnKtuzmuOrDzXJkYjn5QD4OX96yQ5T4
c49aqUt/+bMBJiqEjIRkpRxZBI+E3Kh8E/Gj8lOCAgInc9vSbp7Gwh9zMMD1b6Bx
IQlw3RqnnPVDo4IBFjCCARIwEAYJKwYBBAGceAEBBAMCAQAwFwYJKwYBBAGceAEC
BAoWCE1pbGFuLUIwMBEGCisGAQQBnHgBAwEEAwIBAjARBgorBgEEAZx4AQMCBAMC
AQAwEQYKKwYBBAGceAEDBAQDAgEAMBEGCisGAQQBnHgBAwUEAwIBADARBgorBgEE
AZx4AQMGBAMCAQAwEQYKKwYBBAGceAEDBwQDAgEAMBEGCisGAQQBnHgBAwMEAwIB
BjARBgorBgEEAZx4AQMIBAMCAUMwTQYJKwYBBAGceAEEBEDVWeqhxj6gSy9LvZfD
wdI5jBonNXds2A4Fcdw6OQcPtWT5DbJjXFE/78ckjs/zVC4ehW3cPRuEm9/gH5mv
uNC2MEYGCSqGSIb3DQEBCjA5oA8wDQYJYIZIAWUDBAICBQChHDAaBgkqhkiG9w0B
AQgwDQYJYIZIAWUDBAICBQCiAwIBMKMDAgEBA4ICAQACKL4ErvzaV0gFYd6ZdY/e
kM9+pTDqyuOs6xE08aBdgDcfuP0dQPiVZB9cR/xu7pcsVS7GqibjLu9Ffbadyjho
IbMK4noqgjSXoET+AwsTolFAcuZEoCFcg0s581WDaDf+efMP2yBKvaQy4Aw8PXMs
d/AUyT59UmOHb+f6i3n6mBMM/FpOvEKQYzfeEHp5dQEhBz1h0Lmvo/TPwPCk1iB4
G8DTdeLQh7Al2Kb9Sko/kenOXuO/b4av6Vs6t8JcLyJrepXWotf+W0UB5OAe4Ajd
+RQ6ECYvEJQGsV9453NSCF2nUtllJ8DzPhd9iHFXXzELXNSC8YHW8Lj7/L1aGTlZ
MjmhUuL3OE0Mw+KJHP0qCY20jCOcBawY3rc/bOXo+adpL+ggJHWBmY8qpWQsZlOi
hM3CP3eOvI4HZt5fKX4SJumT8R43TqIEnqxgf5ordLdmG8CP/hJqnFGiZnbzAZ6O
YTTtyb8wmQgLjmIaErToqUZTxwlkpgLScZZS5m8j9zAjWDJe1ncmbn5ivAE0/CmG
L/s4xcZ+3pXQWkBqpCJuP5QIQ0lMPkk4aJdWHZ3rVtIZriHTDA8iXBfaIX2J5NMp
7e0QZMhqkOG+jgIWLUok8OU/x466vA4g6o3G+39gZhqPTu9SktbLnqghdeqfF7a6
BG6E20ctrvs7l8fXs5k1eA==
-----END CERTIFICATE-----
`))

	invalidVcek = conv([]byte(`
-----BEGIN CERTIFICATE-----
MIICHDCCAaKgAwIBAgIUET2xrzw0NNmOzMT0MtRcmvMzlH8wCgYIKoZIzj0EAwMw
RTELMAkGA1UEBhMCQVUxEzARBgNVBAgMClNvbWUtU3RhdGUxITAfBgNVBAoMGElu
dGVybmV0IFdpZGdpdHMgUHR5IEx0ZDAeFw0yMjA0MjkxMDE5MDNaFw0yMjA1Mjkx
MDE5MDNaMEUxCzAJBgNVBAYTAkFVMRMwEQYDVQQIDApTb21lLVN0YXRlMSEwHwYD
VQQKDBhJbnRlcm5ldCBXaWRnaXRzIFB0eSBMdGQwdjAQBgcqhkjOPQIBBgUrgQQA
IgNiAAQNyKqkSWObvQxfB6h7IEdsHs1PzwLQIvMrURfrL58Lr6/4gn2bGM4oWFlM
bVU+PExshUTk1ZiC4KMZnQW3SHTa3dzkYMhfDkra6tX4ql+YFG9Ia84NwQ48xKJg
wMWWTdGjUzBRMB0GA1UdDgQWBBQ61SCpiSVjY5gHymDozO8Pe0c2QjAfBgNVHSME
GDAWgBQ61SCpiSVjY5gHymDozO8Pe0c2QjAPBgNVHRMBAf8EBTADAQH/MAoGCCqG
SM49BAMDA2gAMGUCMGTCk3N3U2F6ue8f444haGmNh0jB5+gpdLPXWUsg8d7wgUlL
ezSu6LnXUohhBSY35gIxAMpdhKwEv1iYXGx6dRw6va0pq3X8JwA6eEpz/wsbdagC
igHoiH+XFkq156sw35ejoQ==
-----END CERTIFICATE-----
`))

	// Intermediate Certificate
	askMilan = conv([]byte(`
-----BEGIN CERTIFICATE-----
MIIGiTCCBDigAwIBAgIDAQABMEYGCSqGSIb3DQEBCjA5oA8wDQYJYIZIAWUDBAIC
BQChHDAaBgkqhkiG9w0BAQgwDQYJYIZIAWUDBAICBQCiAwIBMKMDAgEBMHsxFDAS
BgNVBAsMC0VuZ2luZWVyaW5nMQswCQYDVQQGEwJVUzEUMBIGA1UEBwwLU2FudGEg
Q2xhcmExCzAJBgNVBAgMAkNBMR8wHQYDVQQKDBZBZHZhbmNlZCBNaWNybyBEZXZp
Y2VzMRIwEAYDVQQDDAlBUkstTWlsYW4wHhcNMjAxMDIyMTgyNDIwWhcNNDUxMDIy
MTgyNDIwWjB7MRQwEgYDVQQLDAtFbmdpbmVlcmluZzELMAkGA1UEBhMCVVMxFDAS
BgNVBAcMC1NhbnRhIENsYXJhMQswCQYDVQQIDAJDQTEfMB0GA1UECgwWQWR2YW5j
ZWQgTWljcm8gRGV2aWNlczESMBAGA1UEAwwJU0VWLU1pbGFuMIICIjANBgkqhkiG
9w0BAQEFAAOCAg8AMIICCgKCAgEAnU2drrNTfbhNQIllf+W2y+ROCbSzId1aKZft
2T9zjZQOzjGccl17i1mIKWl7NTcB0VYXt3JxZSzOZjsjLNVAEN2MGj9TiedL+Qew
KZX0JmQEuYjm+WKksLtxgdLp9E7EZNwNDqV1r0qRP5tB8OWkyQbIdLeu4aCz7j/S
l1FkBytev9sbFGzt7cwnjzi9m7noqsk+uRVBp3+In35QPdcj8YflEmnHBNvuUDJh
LCJMW8KOjP6++Phbs3iCitJcANEtW4qTNFoKW3CHlbcSCjTM8KsNbUx3A8ek5EVL
jZWH1pt9E3TfpR6XyfQKnY6kl5aEIPwdW3eFYaqCFPrIo9pQT6WuDSP4JCYJbZne
KKIbZjzXkJt3NQG32EukYImBb9SCkm9+fS5LZFg9ojzubMX3+NkBoSXI7OPvnHMx
jup9mw5se6QUV7GqpCA2TNypolmuQ+cAaxV7JqHE8dl9pWf+Y3arb+9iiFCwFt4l
AlJw5D0CTRTC1Y5YWFDBCrA/vGnmTnqG8C+jjUAS7cjjR8q4OPhyDmJRPnaC/ZG5
uP0K0z6GoO/3uen9wqshCuHegLTpOeHEJRKrQFr4PVIwVOB0+ebO5FgoyOw43nyF
D5UKBDxEB4BKo/0uAiKHLRvvgLbORbU8KARIs1EoqEjmF8UtrmQWV2hUjwzqwvHF
ei8rPxMCAwEAAaOBozCBoDAdBgNVHQ4EFgQUO8ZuGCrD/T1iZEib47dHLLT8v/gw
HwYDVR0jBBgwFoAUhawa0UP3yKxV1MUdQUir1XhK1FMwEgYDVR0TAQH/BAgwBgEB
/wIBADAOBgNVHQ8BAf8EBAMCAQQwOgYDVR0fBDMwMTAvoC2gK4YpaHR0cHM6Ly9r
ZHNpbnRmLmFtZC5jb20vdmNlay92MS9NaWxhbi9jcmwwRgYJKoZIhvcNAQEKMDmg
DzANBglghkgBZQMEAgIFAKEcMBoGCSqGSIb3DQEBCDANBglghkgBZQMEAgIFAKID
AgEwowMCAQEDggIBAIgeUQScAf3lDYqgWU1VtlDbmIN8S2dC5kmQzsZ/HtAjQnLE
PI1jh3gJbLxL6gf3K8jxctzOWnkYcbdfMOOr28KT35IaAR20rekKRFptTHhe+DFr
3AFzZLDD7cWK29/GpPitPJDKCvI7A4Ug06rk7J0zBe1fz/qe4i2/F12rvfwCGYhc
RxPy7QF3q8fR6GCJdB1UQ5SlwCjFxD4uezURztIlIAjMkt7DFvKRh+2zK+5plVGG
FsjDJtMz2ud9y0pvOE4j3dH5IW9jGxaSGStqNrabnnpF236ETr1/a43b8FFKL5QN
mt8Vr9xnXRpznqCRvqjr+kVrb6dlfuTlliXeQTMlBoRWFJORL8AcBJxGZ4K2mXft
l1jU5TLeh5KXL9NW7a/qAOIUs2FiOhqrtzAhJRg9Ij8QkQ9Pk+cKGzw6El3T3kFr
Eg6zkxmvMuabZOsdKfRkWfhH2ZKcTlDfmH1H0zq0Q2bG3uvaVdiCtFY1LlWyB38J
S2fNsR/Py6t5brEJCFNvzaDky6KeC4ion/cVgUai7zzS3bGQWzKDKU35SqNU2WkP
I8xCZ00WtIiKKFnXWUQxvlKmmgZBIYPe01zD0N8atFxmWiSnfJl690B9rJpNR/fI
ajxCW3Seiws6r1Zm+tCuVbMiNtpS9ThjNX4uve5thyfE2DgoxRFvY1CsoF5M
-----END CERTIFICATE-----
`))

	// Root CA
	arkMilan = conv([]byte(`
-----BEGIN CERTIFICATE-----
MIIGYzCCBBKgAwIBAgIDAQAAMEYGCSqGSIb3DQEBCjA5oA8wDQYJYIZIAWUDBAIC
BQChHDAaBgkqhkiG9w0BAQgwDQYJYIZIAWUDBAICBQCiAwIBMKMDAgEBMHsxFDAS
BgNVBAsMC0VuZ2luZWVyaW5nMQswCQYDVQQGEwJVUzEUMBIGA1UEBwwLU2FudGEg
Q2xhcmExCzAJBgNVBAgMAkNBMR8wHQYDVQQKDBZBZHZhbmNlZCBNaWNybyBEZXZp
Y2VzMRIwEAYDVQQDDAlBUkstTWlsYW4wHhcNMjAxMDIyMTcyMzA1WhcNNDUxMDIy
MTcyMzA1WjB7MRQwEgYDVQQLDAtFbmdpbmVlcmluZzELMAkGA1UEBhMCVVMxFDAS
BgNVBAcMC1NhbnRhIENsYXJhMQswCQYDVQQIDAJDQTEfMB0GA1UECgwWQWR2YW5j
ZWQgTWljcm8gRGV2aWNlczESMBAGA1UEAwwJQVJLLU1pbGFuMIICIjANBgkqhkiG
9w0BAQEFAAOCAg8AMIICCgKCAgEA0Ld52RJOdeiJlqK2JdsVmD7FktuotWwX1fNg
W41XY9Xz1HEhSUmhLz9Cu9DHRlvgJSNxbeYYsnJfvyjx1MfU0V5tkKiU1EesNFta
1kTA0szNisdYc9isqk7mXT5+KfGRbfc4V/9zRIcE8jlHN61S1ju8X93+6dxDUrG2
SzxqJ4BhqyYmUDruPXJSX4vUc01P7j98MpqOS95rORdGHeI52Naz5m2B+O+vjsC0
60d37jY9LFeuOP4Meri8qgfi2S5kKqg/aF6aPtuAZQVR7u3KFYXP59XmJgtcog05
gmI0T/OitLhuzVvpZcLph0odh/1IPXqx3+MnjD97A7fXpqGd/y8KxX7jksTEzAOg
bKAeam3lm+3yKIcTYMlsRMXPcjNbIvmsBykD//xSniusuHBkgnlENEWx1UcbQQrs
+gVDkuVPhsnzIRNgYvM48Y+7LGiJYnrmE8xcrexekBxrva2V9TJQqnN3Q53kt5vi
Qi3+gCfmkwC0F0tirIZbLkXPrPwzZ0M9eNxhIySb2npJfgnqz55I0u33wh4r0ZNQ
eTGfw03MBUtyuzGesGkcw+loqMaq1qR4tjGbPYxCvpCq7+OgpCCoMNit2uLo9M18
fHz10lOMT8nWAUvRZFzteXCm+7PHdYPlmQwUw3LvenJ/ILXoQPHfbkH0CyPfhl1j
WhJFZasCAwEAAaN+MHwwDgYDVR0PAQH/BAQDAgEGMB0GA1UdDgQWBBSFrBrRQ/fI
rFXUxR1BSKvVeErUUzAPBgNVHRMBAf8EBTADAQH/MDoGA1UdHwQzMDEwL6AtoCuG
KWh0dHBzOi8va2RzaW50Zi5hbWQuY29tL3ZjZWsvdjEvTWlsYW4vY3JsMEYGCSqG
SIb3DQEBCjA5oA8wDQYJYIZIAWUDBAICBQChHDAaBgkqhkiG9w0BAQgwDQYJYIZI
AWUDBAICBQCiAwIBMKMDAgEBA4ICAQC6m0kDp6zv4Ojfgy+zleehsx6ol0ocgVel
ETobpx+EuCsqVFRPK1jZ1sp/lyd9+0fQ0r66n7kagRk4Ca39g66WGTJMeJdqYriw
STjjDCKVPSesWXYPVAyDhmP5n2v+BYipZWhpvqpaiO+EGK5IBP+578QeW/sSokrK
dHaLAxG2LhZxj9aF73fqC7OAJZ5aPonw4RE299FVarh1Tx2eT3wSgkDgutCTB1Yq
zT5DuwvAe+co2CIVIzMDamYuSFjPN0BCgojl7V+bTou7dMsqIu/TW/rPCX9/EUcp
KGKqPQ3P+N9r1hjEFY1plBg93t53OOo49GNI+V1zvXPLI6xIFVsh+mto2RtgEX/e
pmMKTNN6psW88qg7c1hTWtN6MbRuQ0vm+O+/2tKBF2h8THb94OvvHHoFDpbCELlq
HnIYhxy0YKXGyaW1NjfULxrrmxVW4wcn5E8GddmvNa6yYm8scJagEi13mhGu4Jqh
3QU3sf8iUSUr09xQDwHtOQUVIqx4maBZPBtSMf+qUDtjXSSq8lfWcd8bLr9mdsUn
JZJ0+tuPMKmBnSH860llKk+VpVQsgqbzDIvOLvD6W1Umq25boxCYJ+TuBoa4s+HH
CViAvgT9kf/rBq1d+ivj6skkHxuzcxbk1xv6ZGxrteJxVH7KlX7YRdZ6eARKwLe4
AFZEAwoKCQ==
-----END CERTIFICATE-----
`))

	validNonce = []byte{0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23}

	invalidNonce = []byte{0xAA, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23}

	validMeasurement, _ = hex.DecodeString("5131eed7db07e1eb84954019fcdc5903688f15a9eb95ea59c751fd902dd09dfe51956abe38d7cc25bc912256b1bf384c")

	invalidMeasurement, _ = hex.DecodeString("ab31eed7db07e1eb84954019fcdc5903688f15a9eb95ea59c751fd902dd09dfe51956abe38d7cc25bc912256b1bf384c")

	validCertChain = [][]byte{validVcek.Raw, askMilan.Raw, arkMilan.Raw}

	invalidCertChain = [][]byte{validVcek.Raw, arkMilan.Raw}

	invalidLeafCert = [][]byte{invalidVcek.Raw, askMilan.Raw, arkMilan.Raw}

	validSnpPolicy = SnpPolicy{
		Type:         "SNP Policy",
		SingleSocket: false,
		Debug:        false,
		Migration:    false,
		Smt:          true,
		AbiMajor:     0,
		AbiMinor:     0,
	}

	invalidSnpPolicy = SnpPolicy{
		Type:         "SNP Policy",
		SingleSocket: false,
		Debug:        true,
		Migration:    false,
		Smt:          true,
		AbiMajor:     0,
		AbiMinor:     0,
	}

	validVersion = uint32(2)

	validFw = SnpFw{
		Build: 3,
		Major: 1,
		Minor: 51,
	}

	invalidFw = SnpFw{
		Build: 4,
		Major: 1,
		Minor: 51,
	}

	validTcb = SnpTcb{
		Bl:    2,
		Tee:   0,
		Snp:   6,
		Ucode: 67,
	}

	invalidTcb = SnpTcb{
		Bl:    2,
		Tee:   0,
		Snp:   6,
		Ucode: 68,
	}

	validFingerprint = "69D063B45344D26A2E94E1F4210DE49EF555308287D4C174445C95639A540BCD"

	invalidFingerprint = "AAD063B45344D26A2E94E1F4210DE49EF555308287D4C174445C95639A540BCD"
)
