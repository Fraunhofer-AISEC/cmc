#!/bin/bash

set -euo pipefail

trap '[ $? -eq 0 ] && exit 0; printf "%s failed\n" "$0"' EXIT
dir="$(CDPATH='' cd -- "$(dirname -- "$0")" && pwd -P)"
source "${dir}/utils.sh"
export PATH=${PATH}:${HOME}/go/bin

if [[ "$#" -ne 2 ]]; then
   echo "Usage: ./update-full-simple <data-folder> <cbor|json>"
   exit 1
fi

data=$(set -e; abs_path "${1}")
input="${data}/metadata-raw"
tmp="${data}/metadata-tmp"
out="${data}/metadata-signed"
ser="${2}"

if [[ ! -d "${data}" ]]; then
  echo "Data directory ${1} does not exist. Did you run the setup-full-simple script? Abort.."
  exit 1
fi

echo "Using ${data} as directory for local data"

# Parse the values of the RTM PCRs from the kernel's binary bios measurements as reference values
referenceValues=$(sudo parse-srtm-pcrs -p 0,1,2,3,4,5,6,7 -f json -e)

# Replace existing reference values with new reference values in the RTM Manifest
json=$(cat "${input}/rtm.manifest.json")
json=$(echo "${json}" | jq 'del(.referenceValues[])')
json=$(echo "${json}" | jq --argjson ver "${referenceValues}" '.referenceValues += $ver')
printf "%s\n" "${json}" > "${input}/rtm.manifest.json"

# Parse the values of the OS PCRs from the kernel's binary bios measurements as reference values
referenceValues=$(sudo parse-srtm-pcrs -p 8,9 -f json -e)

# Replace existing reference values with new reference values in the RTM Manifest
json=$(cat "${input}/os.manifest.json")
json=$(echo "${json}" | jq 'del(.referenceValues[])')
json=$(echo "${json}" | jq --argjson ver "${referenceValues}" '.referenceValues += $ver')
printf "%s\n" "${json}" > "${input}/os.manifest.json"

# Sign the metadata*
key="${data}/pki/signing-cert-key.pem"
chain="${data}/pki/signing-cert.pem,${data}/pki/ca.pem"

rm -rf "${tmp}"
rm -rf "${out}"

mkdir -p "${tmp}"
mkdir -p "${out}"

if [[ "${ser,,}" = "json" ]]; then
  echo "using json serialization"
  cp "${input}/rtm.manifest.json"        "${tmp}/rtm.manifest.json"
  cp "${input}/os.manifest.json"         "${tmp}/os.manifest.json"
  cp "${input}/device.description.json"  "${tmp}/device.description.json"
  cp "${input}/device.config.json"       "${tmp}/device.config.json"
elif [[ "${ser,,}" = "cbor" ]]; then
  echo "using cbor serialiation"
  cmc-converter -in "${input}/rtm.manifest.json"        -out "${tmp}/rtm.manifest.cbor"       -outform cbor
  cmc-converter -in "${input}/os.manifest.json"         -out "${tmp}/os.manifest.cbor"        -outform cbor
  cmc-converter -in "${input}/device.description.json"  -out "${tmp}/device.description.cbor" -outform cbor
  cmc-converter -in "${input}/device.config.json"       -out "${tmp}/device.config.cbor"      -outform cbor
else
  echo "serialization format ${ser} is not supported"
  exit 1
fi

cmc-signing-tool -in "${tmp}/rtm.manifest.${ser}"        -out "${out}/rtm.manifest.${ser}"        -keys "${key}" -x5cs "${chain}"
cmc-signing-tool -in "${tmp}/os.manifest.${ser}"         -out "${out}/os.manifest.${ser}"         -keys "${key}" -x5cs "${chain}"
cmc-signing-tool -in "${tmp}/device.description.${ser}"  -out "${out}/device.description.${ser}"  -keys "${key}" -x5cs "${chain}"
cmc-signing-tool -in "${tmp}/device.config.${ser}"       -out "${out}/device.config.${ser}"       -keys "${key}" -x5cs "${chain}"
