#!/bin/bash

set -euo pipefail

dir="$(CDPATH='' cd -- "$(dirname -- "$0")/.." && pwd -P)"
source "${dir}/bin/utils.sh"

data="${dir}/data"

# Cleanup to kill all running processes
trap "exit" INT TERM
trap cleanup EXIT

cleanup() {

    if [[ ! $? -eq 0 ]]; then
        printf "[\033[31;1mFAILED\033[0m]\nCleaning up..\n"
    fi
    kill_process "cmcd"
    kill_process "testtool"
    kill_process "estserver"
    stty sane
}

kill_process() {
    local process_name=$1
    set +e

    pid=$(pgrep -x "$process_name")
    if [ ! -n "$pid" ]; then
        set -e
        return
    fi

    pkill -SIGINT "${process_name}" > /dev/null 2>&1
    if [ $? -eq 1 ]; then
        sudo pkill -SIGINT "${process_name}" > /dev/null 2>&1
        if [ $? -eq 1 ]; then
            printf "FAIL\n"
            set -e
            return
        fi
    fi

    sleep 0.2

    if pgrep -x "${process_name}" > /dev/null; then
        sudo pkill -9 "${process_name}" > /dev/null 2>&1
        sleep 0.2
    fi

    if pgrep -x "${process_name}" > /dev/null; then
        echo "Failed to kill ${process_name}"
        exit 1
    fi

    set -e
    return
}


# Function to wait for a specific message in a process's output
wait_for_message() {
    local process_pid=$1
    local output_file=$2
    local message=$3

    # Give the output file some time to be generated
    sleep 0.3

    message_found=false
    while kill -0 ${process_pid} 2>/dev/null; do
        if [[ -f "${cmc_log}" ]]; then
            if grep -q "${message}" "${output_file}"; then
                message_found=true
                return 0
            fi
        fi
    done

    if ! ${message_found}; then
        echo "Process did not output the expected message: '$message'."
        return 1
    fi
}


if [[ ! -d "${data}" ]]; then
  echo "Data directory ${1} does not exist. Did you run the setup-cmc script? Abort.."
  exit 1
fi

log_dir="${data}/logs"

metadata="${data}/metadata-signed"
storage="${data}/cmc-storage"
cache="${data}/cmc-cache"
peercache="${data}/cmc-peer-cache"
ctrlog="${data}/cmc-container-measurements"

est_params=(
    "-port" "9000" \
    "-estcakey"             "${data}/pki/ca-key.pem" \
    "-estcachain"           "${data}/pki/ca.pem" \
    "-httpfolder"           "${data}" \
    "-tpmekcertdb"          "${data}/tpm-ek-certs.db" \
    "-tlskey"               "${data}/pki/est-tls-key.pem" \
    "-tlscerts"             "${data}/pki/est-tls.pem" \
    "-loglevel"             "trace" \
    "-logfile"              "${log_dir}/estserver.log" \
    "-verifyekcert=false" \
)

cmc_params=(
    "-cmcaddr" "localhost:9955" \
    "-provaddr" "https://localhost:9000" \
    "-metadata" "file://${metadata}" \
    "-drivers" "tpm,sw" \
    "-ima=true" \
    "-imapcr" "10" \
    "-keyconfig" "EC256" \
    "-loglevel" "trace" \
    "-storage" "${storage}" \
    "-cache" "${cache}"
    "-peercache" "${peercache}" \
    "-measurementlog=true" \
    "-ctr=true" \
    "-ctrdriver" "sw" \
    "-ctrlog" "${ctrlog}" \
    "-esttlscas" "${data}/pki/ca.pem" \
)

testtool_params=(
    "-report" "attestation-report" \
    "-result" "attestation-result.json" \
    "-nonce" "nonce" \
    "-identitycas" "${data}/pki/ca.pem" \
    "-metadatacas" "${data}/pki/ca.pem" \
    "-estca" "${data}/pki/ca.pem" \
    "-mtls=true" \
    "-attest" "mutual" \
    "-loglevel" "trace" \
    "-cmcaddr" "localhost:9955" \
    "-keyconfig" "EC256" \
)

attest_success=("success" "fail")

ar_serializers=("json" "cbor")

api_serializers=("json" "cbor")

protocols=("grpc" "coap" "socket")

modes_server=("generate" "listen" "serve")

modes_server_params=("" "-addr 0.0.0.0:4443" "-addr 0.0.0.0:8082")

modes_client=("verify" "dial" "request")

modes_client_params=("" "-addr localhost:4443" "-addr https://localhost:8082/post -method POST -data \"hello ahttps\" -header \"Content-Type: text/plain\"")

modes_server_ready_msg=("Wrote attestation response" "Serving under" "Serving HTTPS under")

modes_server_success_msg=("Wrote attestation response" "Server-side aTLS connection complete" "Server-side aHTTPS request completed")
modes_client_success_msg=("SUCCESS: Verification for Prover" "Client-side aTLS connection complete" "Client-side aHTTPS request completed")

modes_server_fail_msg=("Wrote attestation response" "attestation report verification failed" "attestation report verification failed")
modes_client_fail_msg=("FAILED: Verification for Prover" "attestation report verification failed" "attestation report verification failed")

# Clean start
sudo rm -rf "${storage}"
sudo rm -rf "${cache}"
sudo rm -rf "${peercache}"
sudo rm -rf "${log_dir}"

mkdir -p "${log_dir}"

# Start est server
sudo "${dir}/provision/estserver/estserver" "${est_params[@]}" &
disown
sleep 0.2
stty sane

# Iterate over the array
for success in "${attest_success[@]}"
do
    for ar_serializer in "${ar_serializers[@]}"
    do
        metadata_log="${log_dir}/metadata_${ar_serializer}.log"

        # Generate metadata for serializer (do not generate app manifest for failed attestation test)
        echo "Generating ${ar_serializer} metadata =================================================="
        generate-device-description > "${metadata_log}" 2>&1
        generate-rtm-manifest-tpm >> "${metadata_log}" 2>&1
        generate-os-manifest-tpm >> "${metadata_log}" 2>&1
        if [[ "${success}" == "success" ]]; then
            generate-app-manifest-tpm >> "${metadata_log}" 2>&1
        fi
        sign-metadata "${ar_serializer}" >> "${metadata_log}" 2>&1

        # Test CMC with the parameter matrix
        for api_serializer in "${api_serializers[@]}"
        do
            for i in "${!protocols[@]}"
            do
                cmc_log="${log_dir}/cmcd_${success}_${ar_serializer}_${api_serializer}_${protocols[i]}.log"

                echo "Starting cmcd"
                sudo "${dir}/cmcd/cmcd" \
                    "${cmc_params[@]}" \
                    -logfile "${cmc_log}" \
                    -api "${protocols[i]}" \
                    &
                cmc_pid="$!"
                disown
                wait_for_message "$cmc_pid" "${cmc_log}" "Waiting for.*requests"
                stty sane
                echo "Restarted cmcd ----------------------------------------------------------------"

                for j in "${!modes_server[@]}"
                do
                    server_log="${log_dir}/testtool_${success}_${ar_serializer}_${api_serializer}_${protocols[i]}_${modes_server[j]}.log"
                    client_log="${log_dir}/testtool_${success}_${ar_serializer}_${api_serializer}_${protocols[i]}_${modes_client[j]}.log"

                    printf "TEST MODE %-8s | ATT %-7s | AR %s | SER %s | API %s\t" "${modes_client[j]}" "${success}" "${ar_serializer}" "${api_serializer}" "${protocols[i]}"

                    "${dir}/testtool/testtool" \
                        "${testtool_params[@]}" \
                        -logfile "${server_log}" \
                        -mode ${modes_server[j]} \
                        -api ${protocols[i]} \
                        -apiserializer ${api_serializer} \
                        ${modes_server_params[j]} \
                        &
                    disown
                    wait_for_message $! "${server_log}" "${modes_server_ready_msg[j]}"
                    stty sane

                    "${dir}/testtool/testtool" \
                        "${testtool_params[@]}" \
                        -logfile "${client_log}" \
                        -mode "${modes_client[j]}" \
                        -apiserializer "${api_serializer}" \
                        -api "${protocols[i]}" \
                        ${modes_client_params[j]}
                    stty sane

                    if [[ "${success}" == "success" ]]; then
                        wait_msg_server="${modes_server_success_msg[j]}"
                        wait_msg_client="${modes_client_success_msg[j]}"
                    else
                        wait_msg_server="${modes_server_fail_msg[j]}"
                        wait_msg_client="${modes_client_fail_msg[j]}"
                    fi

                    # Verify the server and client output
                    grep -q "${wait_msg_server}" "${server_log}"
                    grep -q "${wait_msg_client}" "${client_log}"
                    printf "[\033[32;1m  OK  \033[0m]\n"

                    kill_process "testtool"
                done
                kill_process "cmcd"
            done
        done
    done
done

echo "Finished"