#!/bin/bash

set -euo pipefail

trap '[ $? -eq 0 ] && exit 0; printf "%s failed\n" "$0"' EXIT
export PATH=${PATH}:${HOME}/go/bin

abs_path() {
  if [[ -d "$(dirname "$1")" ]]
  then
    echo "$(cd "$(dirname "$1")" && pwd)/$(basename "$1")" || true
  fi
}

if [[ "$#" -ne 3 ]]; then
   echo "Usage: ./setup-full-simple <cmc-folder> <data-folder> <cbor|json>"
   exit
fi

cmc=$(set -e; abs_path "$1")
data=$(set -e; abs_path "$2")
ser="${3}"

if [[ ! -d "${cmc}" ]]; then
  echo "CMC directory does not exist. Did you clone the repository? Abort.."
  exit 1
fi

if [[ -d "${data}" ]]; then
  echo "Data directory does already exist. Please choose a new directory. Abort.."
  exit 1
fi

echo "Using CMC: ${cmc}"
echo "Using ${data} as directory for local data"

# Create a folder for the cmc configuration and metadata
mkdir -p "${data}"

# Install dependencies
sudo apt install -y moreutils golang-cfssl build-essential zlib1g-dev libssl-dev jq

# Intall tpm-pcr-tools
git clone https://github.com/Fraunhofer-AISEC/tpm-pcr-tools.git "${data}/tpm-pcr-tools"
cd "${data}/tpm-pcr-tools"
make
sudo make install

# Build CMC
cd "${cmc}"
echo "Building CMC.."
go build ./...

# Install CMC to $GOPATH/bin
echo "Installing CMC"
go install ./...

# Copy metadata templates
cp -r "${cmc}/example-setup/"* "${data}"

# Generate a PKI suitable for your needs. You can use the simple PKI example-setup for testing:
"${data}/setup-pki-simple" -i "${data}" -o "${data}/pki"

# Update and sign metadata
"${data}/update-full-simple" "${data}" "${ser}"
