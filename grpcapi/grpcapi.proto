// Copyright (c) 2021 Fraunhofer AISEC
// Fraunhofer-Gesellschaft zur Foerderung der angewandten Forschung e.V.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package grpcapi;
option go_package = "./;grpcapi";

service CMCService {
    // Signs content of request with key that belongs to ID of requester
    rpc TLSSign(TLSSignRequest) returns (TLSSignResponse) {}
    rpc TLSCert(TLSCertRequest) returns (TLSCertResponse) {}
    rpc Attest(AttestationRequest) returns (AttestationResponse) {}
    rpc Verify(VerificationRequest) returns (VerificationResponse) {}
    rpc PeerCache(PeerCacheRequest) returns (PeerCacheResponse) {}
    rpc Measure(MeasureRequest) returns (MeasureResponse) {}
}

enum HashFunction {
	  SHA1        = 0;
	  SHA224      = 1;
	  SHA256      = 2;
	  SHA384      = 3;
	  SHA512      = 4;
	  MD4         = 5;
	  MD5         = 6;
	  MD5SHA1     = 7;
	  RIPEMD160   = 8;
	  SHA3_224    = 9;
	  SHA3_256    = 10;
	  SHA3_384    = 11;
	  SHA3_512    = 12;
	  SHA512_224  = 13;
	  SHA512_256  = 14;
	  BLAKE2s_256 = 15;
	  BLAKE2b_256 = 16;
	  BLAKE2b_384 = 17;
	  BLAKE2b_512 = 18;
}


message AttestationRequest {
  bytes nonce = 1;
  repeated string cached = 2;
}

message AttestationResponse {
  bytes report = 1;
  map<string, bytes> metadata = 2;
  repeated string cache_misses = 3;
}

message VerificationRequest {
  bytes nonce = 1;
  bytes report = 2;
  map<string, bytes> metadata = 3;
  bytes ca = 4;
  string peer = 5;
  repeated string cache_misses = 6;
  bytes policies = 7;

}

message VerificationResponse {
  bytes verification_result = 2;
}

message MeasureRequest {
  string name = 1;
  bytes config_sha256 = 2;
  bytes rootfs_sha256 = 3;
  bytes oci_spec = 4;
}

message MeasureResponse {
  bool success = 2;
}

message TLSSignRequest {
  bytes content = 2;
  HashFunction hashtype = 3;
  PSSOptions pssOpts = 4;
}

message TLSSignResponse {
  bytes signed_content = 2;
}

message TLSCertRequest {
}

message TLSCertResponse {
  repeated bytes certificate = 2; // PEM encoded, separated by line
}

message PeerCacheRequest {
  string peer = 1;
}

message PeerCacheResponse {
  repeated string cache = 1;
}

message PSSOptions {
  int32 salt_length = 1;
}