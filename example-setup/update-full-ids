#!/bin/bash

set -euo pipefail

trap '[ $? -eq 0 ] && exit 0; printf "%s failed\n" "$0"' EXIT
export PATH=${PATH}:${HOME}/go/bin

function abs_path() {
  if [[ -d "$(dirname "$1")" ]]
  then
    echo "$(cd "$(dirname "$1")" && pwd)/$(basename "$1")" || true
  fi
}

if [[ "$#" -ne 2 ]]; then
   echo "Usage: ./update-full-ids <data-folder> <cbor|json>"
   exit 1
fi

data=$(set -e; abs_path "$1")
input="${data}/metadata-raw"
tmp="${data}/metadata-tmp"
out="${data}/metadata-signed"
ser="$2"

if [[ ! -d "${data}" ]]; then
  echo "Data directory ${data} does not exist. Did you run the setup-full-ids script? Abort.."
  exit 1
fi

echo "Using ${data} as directory for local data"

# Parse the values of the RTM PCRs from the kernel's binary bios measurements as reference values
referenceValues=$(sudo parse-srtm-pcrs -p 0,1,2,3,4,5,6,7 -f json -e)

# Replace existing reference values with new reference values in the RTM Manifest
json=$(cat "${input}/rtm.manifest.json")
json=$(echo "${json}" | jq 'del(.referenceValues[])')
json=$(echo "${json}" | jq --argjson ver "${referenceValues}" '.referenceValues += $ver')
printf "%s\n" "${json}" > "${input}/rtm.manifest.json"

# Parse the values of the OS PCRs from the kernel's binary bios measurements as reference values
referenceValues=$(sudo parse-srtm-pcrs -p 8,9 -f json -e)

# Replace existing reference values with new reference values in the OS Manifest
json=$(cat "${input}/os.manifest.json")
json=$(echo "${json}" | jq 'del(.referenceValues[])')
json=$(echo "${json}" | jq --argjson ver "${referenceValues}" '.referenceValues += $ver')
printf "%s\n" "${json}" > "${input}/os.manifest.json"

# Sign the metadata*
key_dev_a="${data}"/pki/developer_A-key.pem
chain_dev_a="${data}"/pki/developer_A.pem,"${data}"/pki/user_sub_ca.pem,"${data}"/pki/ca.pem

key_dev_b="${data}"/pki/developer_B-key.pem
chain_dev_b="${data}"/pki/developer_B.pem,"${data}"/pki/user_sub_ca.pem,"${data}"/pki/ca.pem

key_eva_a="${data}"/pki/evaluator_A-key.pem
chain_eva_a="${data}"/pki/evaluator_A.pem,"${data}"/pki/user_sub_ca.pem,"${data}"/pki/ca.pem

key_eva_b="${data}"/pki/evaluator_B-key.pem
chain_eva_b="${data}"/pki/evaluator_B.pem,"${data}"/pki/user_sub_ca.pem,"${data}"/pki/ca.pem

key_cert_a="${data}"/pki/certifier_A-key.pem
chain_cert_a="${data}"/pki/certifier_A.pem,"${data}"/pki/user_sub_ca.pem,"${data}"/pki/ca.pem

key_cert_b="${data}"/pki/certifier_B-key.pem
chain_cert_b="${data}"/pki/certifier_B.pem,"${data}"/pki/user_sub_ca.pem,"${data}"/pki/ca.pem

key_op_a="${data}"/pki/operator_A-key.pem
chain_op_a="${data}"/pki/operator_A.pem,"${data}"/pki/user_sub_ca.pem,"${data}"/pki/ca.pem

rm -rf "${tmp}"
rm -rf "${out}"

mkdir -p "${tmp}"
mkdir -p "${out}"

if [[ "${ser,,}" = "json" ]]; then
  echo "using json serialization"
  cp "${input}/rtm.manifest.json"        "${tmp}/rtm.manifest.json"
  cp "${input}/os.manifest.json"         "${tmp}/os.manifest.json"
  cp "${input}/device.description.json"  "${tmp}/device.description.json"
  cp "${input}/device.config.json"       "${tmp}/device.config.json"
  cp "${input}/company.description.json" "${tmp}/company.description.json"
elif [[ "${ser,,}" = "cbor" ]]; then
  echo "using cbor serialiation"
  cmc-converter -in "${input}/rtm.manifest.json"        -out "${tmp}/rtm.manifest.cbor"        -outform cbor
  cmc-converter -in "${input}/os.manifest.json"         -out "${tmp}/os.manifest.cbor"         -outform cbor
  cmc-converter -in "${input}/device.description.json"  -out "${tmp}/device.description.cbor"  -outform cbor
  cmc-converter -in "${input}/device.config.json"       -out "${tmp}/device.config.cbor"       -outform cbor
  cmc-converter -in "${input}/company.description.json" -out "${tmp}/company.description.cbor" -outform cbor
else
  echo "serialization format ${ser} is not supported"
  exit 1
fi

cmc-signing-tool -in "${tmp}/rtm.manifest.${ser}"         -out "${out}/rtm.manifest.${ser}"         -keys "${key_dev_a},${key_eva_a},${key_cert_a}" -x5cs "${chain_dev_a}:${chain_eva_a}:${chain_cert_a}"
cmc-signing-tool -in "${tmp}/os.manifest.${ser}"          -out "${out}/os.manifest.${ser}"          -keys "${key_dev_b},${key_eva_a},${key_cert_a}" -x5cs "${chain_dev_b}:${chain_eva_a}:${chain_cert_a}"
cmc-signing-tool -in "${tmp}/company.description.${ser}"  -out "${out}/company.description.${ser}"  -keys "${key_op_a},${key_eva_b},${key_cert_b}"  -x5cs "${chain_op_a}:${chain_eva_b}:${chain_cert_b}"
cmc-signing-tool -in "${tmp}/device.description.${ser}"   -out "${out}/device.description.${ser}"   -keys "${key_op_a}" -x5cs "${chain_op_a}"
cmc-signing-tool -in "${tmp}/device.config.${ser}"        -out "${out}/device.config.${ser}"        -keys "${key_op_a}" -x5cs "${chain_op_a}"