#!/bin/bash

set -euo pipefail

trap '[ $? -eq 0 ] && exit 0; printf "%s failed\n" "$0"' EXIT
dir="$(CDPATH='' cd -- "$(dirname -- "$0")/.." && pwd -P)"
source "${dir}/bin/utils.sh"

print_usage() {
  echo "Usage: $(basename "$0") [-i] [-h] [-c] <driver>"
  echo "       -h: print help"
  echo "       -i: use ids pki instead of simple pki"
  echo "       -c: use cbor instead of json for metadata"
  echo "       driver: tpm, sgx, snp, tdx"
}

script_suffix=""
serializer="json"

while getopts 'i:h:c' flag; do
  case "${flag}" in
    i)
        script_suffix="-ids"
        shift
        ;;
    c)
        serializer="cbor"
        shift
        ;;
    h)
        print_usage
        exit 0 ;;
    *) print_usage
       exit 1 ;;
  esac
done

if [[ "$#" -lt 1 ]]; then
   print_usage
   exit 1
fi

driver="${1}"

if [[ ! "${driver}" =~ ^(sgx|tpm|snp|tdx)$ ]]; then
    echo "Error: Invalid driver. Expected one of sgx, tpm, snp, tdx."
    exit 1
fi

data="${dir}/data"
cmc="${dir}"

if [[ ! -d "${cmc}" ]]; then
  echo "CMC directory ${cmc} does not exist. Did you clone the repository? Abort.."
  exit 1
fi

if [[ -d "${data}" ]]; then
  echo "Data directory ${data} does already exist. Please choose a new directory. Abort.."
  exit 1
fi

echo "Using CMC: ${cmc}"
echo "Using ${data} as directory for local data"

# Build CMC
go build -C testtool
go build -C cmcd
go build -C est/estserver
go build -C tools/metaconv
go build -C tools/metasign

# Create a folder for the cmc configuration and metadata
mkdir -p "${data}"

# Generate an example PKI
"${dir}/bin/setup-pki${script_suffix}"

# Generate example SGX metadata for the current machine
"${dir}/bin/generate-metadata-${driver}"

echo "signing metadata with serializer ${serializer}"

# Sign the metadata
"${dir}/bin/sign-metadata${script_suffix}" "${serializer}"
