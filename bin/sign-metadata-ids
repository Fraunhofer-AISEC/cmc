#!/bin/bash

set -euo pipefail

trap '[ $? -eq 0 ] && exit 0; printf "%s failed\n" "$0"' EXIT
dir="$(CDPATH='' cd -- "$(dirname -- "$0")/.." && pwd -P)"
source "${dir}/utils.sh"
export PATH=${PATH}:${HOME}/go/bin

if [[ "$#" -ne 2 ]]; then
   echo "Usage: $(basename "$0") <data-folder> <cbor|json>"
   exit 1
fi

data=$(set -e; abs_path "${1}")
input="${data}/metadata-raw"
tmp="${data}/metadata-tmp"
out="${data}/metadata-signed"
ser="${2}"

if [[ ! -d "${data}" ]]; then
  echo "Data directory ${1} does not exist. Did you run the setup-cmc script? Abort.."
  exit 1
fi

echo "Using ${data} as directory for local data"

# Sign the metadata*
key_dev_a="${data}"/pki/developer_A-key.pem
chain_dev_a="${data}"/pki/developer_A.pem,"${data}"/pki/user_sub_ca.pem,"${data}"/pki/ca.pem

key_dev_b="${data}"/pki/developer_B-key.pem
chain_dev_b="${data}"/pki/developer_B.pem,"${data}"/pki/user_sub_ca.pem,"${data}"/pki/ca.pem

key_eva_a="${data}"/pki/evaluator_A-key.pem
chain_eva_a="${data}"/pki/evaluator_A.pem,"${data}"/pki/user_sub_ca.pem,"${data}"/pki/ca.pem

key_eva_b="${data}"/pki/evaluator_B-key.pem
chain_eva_b="${data}"/pki/evaluator_B.pem,"${data}"/pki/user_sub_ca.pem,"${data}"/pki/ca.pem

key_cert_a="${data}"/pki/certifier_A-key.pem
chain_cert_a="${data}"/pki/certifier_A.pem,"${data}"/pki/user_sub_ca.pem,"${data}"/pki/ca.pem

key_cert_b="${data}"/pki/certifier_B-key.pem
chain_cert_b="${data}"/pki/certifier_B.pem,"${data}"/pki/user_sub_ca.pem,"${data}"/pki/ca.pem

key_op_a="${data}"/pki/operator_A-key.pem
chain_op_a="${data}"/pki/operator_A.pem,"${data}"/pki/user_sub_ca.pem,"${data}"/pki/ca.pem

rm -rf "${tmp}"
rm -rf "${out}"

mkdir -p "${tmp}"
mkdir -p "${out}"

# Iterate over all input metadata
for path in "${input}/"*; do
    [[ -e "${path}" ]] || continue

    out_file="$(basename "${path}" | sed 's/\.[^.]*$//').${ser}"

    # Convert to CBOR if specified, otherwise just copy
    if [[ "${ser,,}" = "cbor" ]]; then
      metaconv \
        -in "${path}" \
        -out "${tmp}/${out_file}" \
        -outform cbor
    else
      cp "${path}" "${tmp}/${out_file}"
    fi

    # Get the type to determine the signers
    type=$(jq -r '.type' "${path}")
    if [ "$type" == "Device Description" ]; then
        keys="${key_op_a}"
        x5cs="${chain_op_a}"
    elif [ "$type" == "Company Description" ]; then
        keys="${key_op_a},${key_eva_b},${key_cert_b}"
        x5cs="${chain_op_a}:${chain_eva_b}:${chain_cert_b}"
    else
        keys="${key_dev_a},${key_eva_a},${key_cert_a}"
        x5cs="${chain_dev_a}:${chain_eva_a}:${chain_cert_a}"
    fi


    # Sign metadata object
    metasign \
      -in "${tmp}/${out_file}" \
      -out "${out}/${out_file}" \
      -keys "${keys}" \
      -x5cs "${x5cs}"
done